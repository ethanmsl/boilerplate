# Justfile (Convenience Command Runner)

# local vars
LOCAL_VAR_EXAMPLE:='yes, I am!'

HOME_DIR := env_var('HOME')
LOCAL_ROOT := justfile_directory()
INVOCD_FROM := invocation_directory()
INVOC_IS_ROOT := if INVOCD_FROM == LOCAL_ROOT { "true" } else { "false" }
FROZE_SHA_REGEX := 'FROZE_[a-fA-F0-9]{64}_FROZE-'

# ANSI Color Codes for use with echo command
GRN := '\033[0;32m' # Green
BLU := '\033[0;34m' # Blue
PRP := '\033[0;35m' # Purple
BRN := '\033[0;33m' # Brown
CYN := '\033[0;36m' # Cyan
NC := '\033[0m'     # No Color

# Default, lists commands.
_default:
        @just --list --unsorted


# WARN: install uv via homebrew, generate .env file from template, set pre-commit hook, and sync repository
[confirm]
init: && _gen_git_hooks _gen-env 
    echo "Note: this is intended for use with {{GRN}}uv{{NC}}."
    brew install uv
    uv sync
    
# isort(ruff) --> black(ruff)
fmt:
    uv run ruff check --select I --fix
    uv run ruff format
    
# isort(ruff) --> black(ruff) --> lint(ruff) --> typos --> committed
check: fmt
    uv run ruff check
    typos src/ tests/ support/ README.md
    committed
 
# fmt --> check --> test, doc, security inspect, etc.
test:
    zsh support/pre-commit
    
# run (pre-commit) git hook
hook hook='pre-commit':
    git hook run {{hook}}
    
# create image of inferred code flow (may generate artifact files needing cleanup)
[confirm]
viz_code output_file='support/PROJECT_NAME_codeflow.png':
    uv run code2flow src/PROJECT_NAME/ --language py --output {{output_file}}
    open {{output_file}}
    
# ######################################################################## #

# Show kernels
_kernel-list:
    uv run jupyter kernelspec list

# Remove a kernel
_kernel-remove kernel_name:
    uv run jupyter kernelspec remove {{kernel_name}}

# Regen kernel
_kernel-regen:
    PROJECT_NAME_TEMP=$( uv show | rg project | sd 'project: (.*)$' '$1' ); \
    uv run python -m ipykernel install --user --name $PROJECT_NAME_TEMP --display-name "Python ($PROJECT_NAME_TEMP)"; \
    uv run jupyter kernelspec list
    
# ######################################################################## #

# Print reminder: how to set env vars that propagate to child shells.
_remind_setenv:
    @ echo '{{GRN}}set -a{{NC}}; {{GRN}}source {{BLU}}.env{{NC}}; {{GRN}}set +a{{NC}}'

# ######################################################################## #

# Generate .env file from template, if .env file not present.
_gen-env:
    @ if [ -f '.env' ]; then echo '`{{BRN}}.env{{NC}}` exists, {{PRP}}skipping creation{{NC}}...' && exit 0; else cp -n support/template.env .env; echo "{{BLU}}.env{{NC}} created from template. {{GRN}}Please fill in the necessary values.{{NC}}"; echo "e.g. via 'nvim .env'"; fi

# Attempt to add all git-hooks. (no overwrite)
_gen_git_hooks: _gen-precommit-hook _gen-commitmsg-hook

# Attempt to add `pre-commit` git-hook. (no overwrite)
_gen-precommit-hook:
    @ if [ -f '.git/hooks/pre-commit' ]; then echo '`.git/hooks/{{BRN}}pre-commit{{NC}}` exists, {{PRP}}skipping creation{{NC}}...' && exit 0; else cp -n support/pre-commit .git/hooks/pre-commit; chmod u+x .git/hooks/pre-commit; echo live "{{BLU}}pre-commit{{NC}} hook added to {{GRN}}.git/hooks{{NC}} and set as executable"; fi

# Attempt to add `commit-msg` git-hook. (no overwrite)
_gen-commitmsg-hook:
    @ if [ -f '.git/hooks/commit-msg' ]; then echo '`.git/hooks/{{BRN}}commit-msg{{NC}}` exists, {{PRP}}skipping creation{{NC}}...' && exit 0; else cp -n support/commit-msg .git/hooks/commit-msg; chmod u+x .git/hooks/commit-msg; echo live "{{BLU}}commit-msg{{NC}} hook added to {{GRN}}.git/hooks{{NC}} and set as executable"; fi

# ######################################################################## #

# Freeze! For your safety.
_freeze file:
	mv -iv {{file}} FROZE_{{sha256(file)}}_FROZE-{{file}} | rg {{file}}

# Unfreeze a file. (removes 'FROZE...FROZE-' tag from filename)
_thaw file:
	echo {{file}} | sd '{{FROZE_SHA_REGEX}}' '' | xargs mv -iv {{file}}

# Search local files through ice.
_arctic_recon iceless_name:
	fd --max-depth 1 '{{FROZE_SHA_REGEX}}{{iceless_name}}' | rg {{iceless_name}}


# ######################################################################## #

# Speak Funny to Me!
_uu:
	echo {{uuid()}}

# Say my name.
_sha file:
	echo {{sha256_file(file)}}

# Example function for syntax reference
_example_file_exists_test file:
    echo {{ if path_exists(file) == "true" { "hello" } else { "goodbye" } }}

# ######################################################################## #

# # convenience command to sync repo and run the script
# scriptname *inp='--help':
#     uv sync
#     uv run scriptname {{inp}}
