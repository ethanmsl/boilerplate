[project]
name = "PROJECT_NAME"
version = "0.1.0"
description = "Add your description here"
authors = [
    { name = "Ethan Skowronski-Lutz", email = "33399972+ethanmsl@users.noreply.github.com" },
]
dependencies = [
    "tqdm>=4",
    "colorama>=0.4",
    "requests>=2",
    "python-dotenv>=1",
    "typer>=0.12",
]
readme = "README.md"
requires-python = ">= 3.10"

[project.scripts]
"PROJECT_NAME" = "PROJECT_NAME.commands:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/PROJECT_NAME"]

[tool.pyright]
include = ["src"]
exclude = [".venv", "src/experimental", "src/typestubs", "**/__pycache__"]
# utilizing the fact that we've set Poetry `virtualenv.in-project` to true
venvPath = "."
venv = ".venv"
typeCheckingMode = "basic"                 # "off", "basic", "strict"
reportMissingImports = true
reportMissingTypeStubs = true
executionEnvironments = [{ root = "src" }]

[tool.pytest.ini_options]
# adds the following paths to pythonpath, specified relative to root dir
pythonpath = ["src"]

[tool.ruff]
# Allow imports relative to the "src" and "test" directories.
src = ["src", "tests"]
line-length = 120

# warn, but recommend restructuring for unused `__init__.py` module imports
lint.select = ["ALL"]
lint.ignore = [
    "D203",   # One blank line before class -- conflicts with "D211"
    "D213",   # Multiline docstrings start on second line -- conflicts with "D212"
    "COM812", # missing-trailing-line-comma -- `ruff` recommends disabling to prevent conflicts
    "ISC001", # single-line-implicit-string-concatenation -- `ruff` recommends disabling to prevent conflicts
    "ANN101", # wants type for `self`; to be deprecated -- silly, also difficult due to circularity issues
    "T201",   # no print statements allowed -- prints are useful for communicating with user
]
lint.exclude = ["dev_experiment/*"]

[tool.ruff.lint.extend-per-file-ignores]
# ignore these lints in a file that will be specifying CLI args (via Typer decorators)
"commands.py" = [
    "FBT001", # No `bool` params -- used to specify CLI arguments with Typer module
    "FBT002", # No `bool` param defaults -- CLI argument values in Typer module
    "UP007",  # No `Option[..]` Type-syntax -- used by Typer module
]
# ignore these lints in a file that will be testing CLI arg defining functions
"test_commands.py" = [
    "FBT003", # No `bool` in func calls -- functions being tested represent CLI args
]
# ignore these lints in all test files
"test_*.py" = [
    "S101",    # Use of `assert` -- intended in tests files
    "PLR2004", # Magic Value used in comparison -- impractical rule in test files
]
# ignore these lints in a file conversion to a Jupyter Notebook ("jupytext file")
"*.ju.py" = [
    "T201", # "print found"
    "E402", # "module level import not at top of file"
    # "ERA001", # "commented out code" - this can be confused by jupytext syntax
]
"__init__.py" = [
    "F401", # import not used -- inits are definign namespace for module
    "D104", # missing docstring -- often not useful for thes efiles
]

[tool.uv]
dev-dependencies = [
    "pdoc>=14.6.0",
    "pyright>=1.1.377",
    "pytest>=8.3.2",
    "pytest-cov>=5.0.0",
    "bandit>=1.7.9",
    "ruff>=0.6.2",
    "loguru>=0.7.2",
    "code2flow>=2.5.1",
    "ipykernel>=6.29.5",
]
