# Rust GitIgnores
# [.gitignore Configuration Reference](https://git-scm.com/docs/gitignore/en)
#
# Syntax: .gitignore glob syntax
#        `*`    : match any file in a single level
#        `**`   : recursively match
#        `**/*` : specifies any _files_ at any level (subtly & potentially different)
# note1: ecxclusions must occur _after_ an excluding pattern. (last pattern takes precedence)
# note2: "It is not possible to re-include a file if a parent directory of that file is excluded."


# ===================================
# Custom GitIgnore, Repo-specific

# ===================================
# Custom GitIgnore, Boilerplate

# designate a directory that won't have its contents synced
# typically this is part of (`data/no_sync/`)
**/no_sync/**
**/no-sync/**
**/nosync/**

# gitkeep -- Â¡this must be _after _ all exclusion patterns!
#         -- this excludes it from being caught in *glob* patterns
# dir-exclusion: "It is not possible to re-include a file if a parent directory of that file is excluded." -gitignore docs
#         -- `dir/*` will     allow .gitkeep to be tracked
#         -- `dir/`  will NOT allow tracking
!.gitkeep

# ===================================
# standard GitHub GitIgnore for Rust (as of 2024-VIII-04)
# https://github.com/github/gitignore/blob/main/Rust.gitignore

# Generated by Cargo
# will have compiled files and executables
debug/
target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
# Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb
